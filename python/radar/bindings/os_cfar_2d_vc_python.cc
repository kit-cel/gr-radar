/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(os_cfar_2d_vc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(ba44e708af7b71716f4280bece1554e1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <radar/os_cfar_2d_vc.h>
// pydoc.h is automatically generated in the build directory
#include <os_cfar_2d_vc_pydoc.h>

void bind_os_cfar_2d_vc(py::module& m)
{

    using os_cfar_2d_vc = ::gr::radar::os_cfar_2d_vc;


    py::class_<os_cfar_2d_vc,
               gr::tagged_stream_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<os_cfar_2d_vc>>(m, "os_cfar_2d_vc", D(os_cfar_2d_vc))

        .def(py::init(&os_cfar_2d_vc::make),
             py::arg("vlen"),
             py::arg("samp_compare"),
             py::arg("samp_protect"),
             py::arg("rel_threshold"),
             py::arg("mult_threshold"),
             py::arg("len_key") = "packet_len",
             D(os_cfar_2d_vc, make))


        .def("set_rel_threshold",
             &os_cfar_2d_vc::set_rel_threshold,
             py::arg("inp"),
             D(os_cfar_2d_vc, set_rel_threshold))


        .def("set_mult_threshold",
             &os_cfar_2d_vc::set_mult_threshold,
             py::arg("inp"),
             D(os_cfar_2d_vc, set_mult_threshold))


        .def("set_samp_compare",
             &os_cfar_2d_vc::set_samp_compare,
             py::arg("inp"),
             D(os_cfar_2d_vc, set_samp_compare))


        .def("set_samp_protect",
             &os_cfar_2d_vc::set_samp_protect,
             py::arg("inp"),
             D(os_cfar_2d_vc, set_samp_protect))

        ;
}
