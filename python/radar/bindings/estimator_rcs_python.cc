/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(estimator_rcs.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(58001c0b8dd2ca549a8680b73d54cbf0)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <radar/estimator_rcs.h>
// pydoc.h is automatically generated in the build directory
#include <estimator_rcs_pydoc.h>

void bind_estimator_rcs(py::module& m)
{

    using estimator_rcs = ::gr::radar::estimator_rcs;


    py::class_<estimator_rcs, gr::block, gr::basic_block, std::shared_ptr<estimator_rcs>>(
        m, "estimator_rcs", D(estimator_rcs))

        .def(py::init(&estimator_rcs::make),
             py::arg("num_mean"),
             py::arg("center_freq"),
             py::arg("antenna_gain_tx"),
             py::arg("antenna_gain_rx"),
             py::arg("usrp_gain_rx"),
             py::arg("power_tx"),
             py::arg("corr_factor"),
             py::arg("exponent") = 1,
             D(estimator_rcs, make))


        .def("set_num_mean",
             &estimator_rcs::set_num_mean,
             py::arg("val"),
             D(estimator_rcs, set_num_mean))


        .def("set_center_freq",
             &estimator_rcs::set_center_freq,
             py::arg("val"),
             D(estimator_rcs, set_center_freq))


        .def("set_antenna_gain_tx",
             &estimator_rcs::set_antenna_gain_tx,
             py::arg("val"),
             D(estimator_rcs, set_antenna_gain_tx))


        .def("set_antenna_gain_rx",
             &estimator_rcs::set_antenna_gain_rx,
             py::arg("val"),
             D(estimator_rcs, set_antenna_gain_rx))


        .def("set_usrp_gain_rx",
             &estimator_rcs::set_usrp_gain_rx,
             py::arg("val"),
             D(estimator_rcs, set_usrp_gain_rx))


        .def("set_power_tx",
             &estimator_rcs::set_power_tx,
             py::arg("val"),
             D(estimator_rcs, set_power_tx))


        .def("set_corr_factor",
             &estimator_rcs::set_corr_factor,
             py::arg("val"),
             D(estimator_rcs, set_corr_factor))

        ;
}
