/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(usrp_echotimer_cc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(d96753f044b2b982312d86f7be6e1c36)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <radar/usrp_echotimer_cc.h>
// pydoc.h is automatically generated in the build directory
#include <usrp_echotimer_cc_pydoc.h>

void bind_usrp_echotimer_cc(py::module& m)
{

    using usrp_echotimer_cc = ::gr::radar::usrp_echotimer_cc;


    py::class_<usrp_echotimer_cc,
               gr::tagged_stream_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<usrp_echotimer_cc>>(
        m, "usrp_echotimer_cc", D(usrp_echotimer_cc))

        .def(py::init(&usrp_echotimer_cc::make),
             py::arg("samp_rate"),
             py::arg("center_freq"),
             py::arg("num_delay_samps"),
             py::arg("args_tx"),
             py::arg("wire_tx"),
             py::arg("clock_source_tx"),
             py::arg("time_source_tx"),
             py::arg("antenna_tx"),
             py::arg("gain_tx"),
             py::arg("timeout_tx"),
             py::arg("wait_tx"),
             py::arg("lo_offset_tx"),
             py::arg("args_rx"),
             py::arg("wire_rx"),
             py::arg("clock_source_rx"),
             py::arg("time_source_rx"),
             py::arg("antenna_rx"),
             py::arg("gain_rx"),
             py::arg("timeout_rx"),
             py::arg("wait_rx"),
             py::arg("lo_offset_rx"),
             py::arg("len_key") = "packet_len",
             D(usrp_echotimer_cc, make))


        .def("set_num_delay_samps",
             &usrp_echotimer_cc::set_num_delay_samps,
             py::arg("num_samps"),
             D(usrp_echotimer_cc, set_num_delay_samps))


        .def("set_rx_gain",
             &usrp_echotimer_cc::set_rx_gain,
             py::arg("gain"),
             D(usrp_echotimer_cc, set_rx_gain))


        .def("set_tx_gain",
             &usrp_echotimer_cc::set_tx_gain,
             py::arg("gain"),
             D(usrp_echotimer_cc, set_tx_gain))

        ;
}
